# -*- coding: utf-8 -*-
"""COVID19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18N51K6GKz2JBtLijoVM7lsWzhJASKmkN
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
import time
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# ML libraries
import lightgbm as lgb
import xgboost as xgb
from xgboost import plot_importance, plot_tree
from sklearn.model_selection import RandomizedSearchCV, GridSearchCV
from sklearn import linear_model
from sklearn.metrics import mean_squared_error
import keras
import pandas as pd
import numpy as  np
import matplotlib.pyplot as plt

#cargamos el testing set
from google.colab import drive
drive.mount('/content/drive')

#Extraemos los datos
#TestingSet = pd.read_csv('drive/My Drive/Colab Notebooks/test.csv')

TrainingSet = pd.read_csv('drive/My Drive/Colab Notebooks/train.csv')

#Extraemos las features TrainingSet
Train_Id = TrainingSet[['Id']].values
Train_PState = TrainingSet[['Province/State']].values
Train_CountryRegion = TrainingSet[['Country/Region']].values
Train_Lat = TrainingSet[['Lat']].values
Train_Long = TrainingSet[['Long']].values
Train_Date = TrainingSet[['Date']].values
Train_Confirmed = TrainingSet[['ConfirmedCases']].values
Train_Fatal = TrainingSet[['Fatalities']].values
#Extraemos las features TestingSet
Testing_Id = TrainingSet[['Id']].values
Testing_PState = TrainingSet[['Province/State']].values
Testing_CountryRegion = TrainingSet[['Country/Region']].values
Testing_Lat = TrainingSet[['Lat']].values
Testing_Long = TrainingSet[['Long']].values
Testing_Date = TrainingSet[['Date']].values
Testing_Confirmed = TrainingSet[['ConfirmedCases']].values
Testing_Fatal = TrainingSet[['Fatalities']].values

print("Number of Country/Region: ", TrainingSet['Country/Region'].nunique())
print("Dates go from day",  min(TrainingSet['Date']),"to day", max(TrainingSet['Date']), ", a total of", TrainingSet['Date'].nunique(), "days")
print("Countries with Province/State informed: ", TrainingSet[TrainingSet['Province/State'].isna()==False]['Country/Region'].unique())

# Sequential es el modelo mas simple
model = keras.Sequential()
model.add(keras.layers.Dense(1,input_shape=(1,)))
# indicamos que tan rapido vamos a ajustar el modelo
model.compile(keras.optimizers.Adam(lr=1), 'mean_squared_error')
#entrenar el modelo 30 veces, recorrerla 30 veces. 10 puntos de 
#datos que entran a la red al tiempo
model.fit(Train_Confirmed, Train_Id,epochs = 30, batch_size=10)

#confirmed_total_date = TrainingSet.groupby(['Date']).agg({'ConfirmedCases':['sum']})
#fatalities_total_date = TrainingSet.groupby(['Date']).agg({'Fatalities':['sum']})
#total_date = confirmed_total_date.join(fatalities_total_date)
confirmed_total_date_Colombia = TrainingSet[TrainingSet['Country/Region']=='Colombia'].groupby(['Date']).agg({'ConfirmedCases':['sum']})
print("Number of Cases in Colombia: ", max(confirmed_total_date))
fatalities_total_date_Colombia = TrainingSet[TrainingSet['Country/Region']=='Colombia'].groupby(['Date']).agg({'Fatalities':['sum']})
total_date_Colombia = confirmed_total_date_Colombia.join(fatalities_total_date_Colombia)
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(30,5))
total_date_Colombia.plot(ax=ax1)
ax1.set_title("Colombia confirmed cases", size=14)
ax1.set_ylabel("Number of cases", size=14)
ax1.set_xlabel("Date", size=14)
fatalities_total_date_Colombia.plot(ax=ax2, color='orange')
ax2.set_title("Colombia deceased cases", size=14)
ax2.set_ylabel("Number of cases", size=14)
ax2.set_xlabel("Date", size=14)

#TrainingSet.plot(kind='scatter',x='Train_Id',y='Train_Confirmed',title='Infectados en Colombia')
#y_predicted = model.predict(Train_Confirmed)
#plt.plot(Train_Confirmed,y_predicted, color='red')
total_date_Colombia.describe()